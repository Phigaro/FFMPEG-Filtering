diff a/FFMPEG_TEST/main.cpp b/FFMPEG_TEST/main.cpp	(rejected hunks)
@@ -37,13 +37,16 @@
 const char *AVCodecID2Str(AVCodecID id);
 void Stream_Info(AVFormatContext* pFmtCtx);
 void encoding(AVFrame* pVFrame, AVPacket packet);
+void audio_encoding(AVFrame* pAFrame, AVPacket packet);
+void audio_encoding_ex(AVFrame* pVFrame, AVPacket packet);
+
 
 // Video_var
 AVFrame *picture, *tmp_picture;
 uint8_t *video_outbuf;
 int frame_count, video_outbuf_size;
 
-// encode_var
+// Video encode_var
 AVCodec *codec;
 AVCodecContext* c = NULL;
 int i, ret, x, y, got_output;
@@ -53,18 +56,127 @@
 uint8_t endcode[] = { 0,0,1,0xb7 };
 AVCodecID Codec_id = AV_CODEC_ID_MPEG2VIDEO;
 
+// Audio encode_var
+AVCodec *Audio_codec;
+AVCodecContext *Audio_codec_c = NULL;
+AVFrame *Audio_frame;
+AVPacket Audio_pkt;
+int Audio_i, Audio_j, Audio_k, Audio_ret, Audio_got_output;
+int Audio_buffer_size;
+FILE *Audio_f;
+uint16_t *Audio_samples;
+AVCodecID Audio_Codec_id = AV_CODEC_ID_MP2;
+
+static int check_sample_fmt(AVCodec *codec, enum AVSampleFormat sample_fmt)
+{
+    const enum AVSampleFormat *p = codec->sample_fmts;
+
+    while (*p != AV_SAMPLE_FMT_NONE) {
+        if (*p == sample_fmt)
+            return 1;
+        p++;
+    }
+    return 0;
+}
+
+/* just pick the highest supported samplerate */
+static int select_sample_rate(AVCodec *codec)
+{
+    const int *p;
+    int best_samplerate = 0;
+
+    if (!codec->supported_samplerates)
+        return 44100;
+
+    p = codec->supported_samplerates;
+    while (*p) {
+        best_samplerate = FFMAX(*p, best_samplerate);
+        p++;
+    }
+    return best_samplerate;
+}
+
+/* select layout with the highest channel count */
+static int select_channel_layout(AVCodec *codec)
+{
+    const uint64_t *p;
+    uint64_t best_ch_layout = 0;
+    int best_nb_channells   = 0;
+
+    if (!codec->channel_layouts)
+        return AV_CH_LAYOUT_STEREO;
+
+    p = codec->channel_layouts;
+    while (*p) {
+        int nb_channels = av_get_channel_layout_nb_channels(*p);
+
+        if (nb_channels > best_nb_channells) {
+            best_ch_layout    = *p;
+            best_nb_channells = nb_channels;
+        }
+        p++;
+    }
+    return best_ch_layout;
+}
+
+void Audio_encode_alloc(const char* audio_filename) {
+
+
+
+	/* find the MP2 encoder */
+	Audio_codec = avcodec_find_encoder(AV_CODEC_ID_MP2);
+	if (!Audio_codec) {
+		fprintf(stderr, "Audio_codec not found\n");
+		system("pause"); exit(1);
+	}
+
+	Audio_codec_c = avcodec_alloc_context3(Audio_codec);
+	if (!Audio_codec_c) {
+		fprintf(stderr, "Could not allocate audio Audio_codec context\n");
+		system("pause"); exit(1);
+	}
+
+	/* put sample parameters */
+	Audio_codec_c->bit_rate = 64000;
+
+	/* check that the encoder supports s16 pcm input */
+	Audio_codec_c->sample_fmt = AV_SAMPLE_FMT_S16;
+	if (!check_sample_fmt(Audio_codec, Audio_codec_c->sample_fmt)) {
+		fprintf(stderr, "Encoder does not support sample format %s",
+			av_get_sample_fmt_name(Audio_codec_c->sample_fmt));
+		system("pause"); exit(1);
+	}
+
+	/* select other audio parameters supported by the encoder */
+	Audio_codec_c->sample_rate = select_sample_rate(Audio_codec);
+	Audio_codec_c->channel_layout = select_channel_layout(Audio_codec);
+	Audio_codec_c->channels = av_get_channel_layout_nb_channels(Audio_codec_c->channel_layout);
+
+	/* open it */
+	if (avcodec_open2(Audio_codec_c, Audio_codec, NULL) < 0) {
+		fprintf(stderr, "Could not open codec\n");
+		system("pause"); exit(1);
+	}
+
+	Audio_f = fopen(audio_filename, "wb");
+	if (!Audio_f) {
+		fprintf(stderr, "Could not open %s\n", audio_filename);
+		system("pause"); exit(1);
+	}
+}
+
 void encode_alloc(const char* filename) {
 	// ������ H264�� ���ڵ�
 	codec = avcodec_find_encoder(Codec_id);
 	if (!codec) {
 		fprintf(stderr, "Codec not found\n");
-		exit(1);
+		system("pause"); exit(1);
 	}
 
 	c = avcodec_alloc_context3(codec);
 	if (!c) {
 		fprintf(stderr, "Could not allocate video codec context\n");
-		exit(1);
+		system("pause"); exit(1);
 	}
 
 	c->bit_rate = 500000;
@@ -86,28 +198,27 @@
 
 	if (avcodec_open2(c, codec, NULL) < 0) {
 		fprintf(stderr, "Could not open codec\n");
-		exit(1);
+		system("pause"); exit(1);
 	}
 
 	f = fopen(filename, "wb");
 	if (!f) {
 		fprintf(stderr, "Could not open &s\n", filename);
-		exit(1);
+		system("pause"); exit(1);
 	}
 }
 
 int main() {
 
-
-
-
-
-
 	const char* filename;
 	filename = "./Test_Video_result.mpeg";
 
+	const char* audio_filename;
+	audio_filename = "./Test_Audio_result.mp2";
+
 	av_register_all();
 
+	Audio_encode_alloc(audio_filename);
 	encode_alloc(filename);
 
 	AVStream *Video_Stream = NULL;
@@ -115,12 +226,19 @@
 	// ���� �ε�
 	AVFormatContext* f_ctx = NULL;
 	AVCodec* dec;
+	AVCodec* Audio_dec;
 	AVCodecContext* dec_ctx;
+	AVCodecContext* Audio_dec_ctx;
+
 	AVFormatContext* oc = NULL;
+
 	avformat_open_input(&f_ctx, szFilePath, NULL, NULL);
 	int vst_idx = av_find_best_stream(f_ctx, AVMEDIA_TYPE_VIDEO, -1, -1, &dec, 0);
+	int ast_idx = av_find_best_stream(f_ctx, AVMEDIA_TYPE_AUDIO, -1, -1, &Audio_dec, 0);
 	dec_ctx = f_ctx->streams[vst_idx]->codec;
+	Audio_dec_ctx = f_ctx->streams[ast_idx]->codec;
 	avcodec_open2(dec_ctx, dec, NULL);
+	avcodec_open2(Audio_dec_ctx, Audio_dec, NULL);
 
 	oc = avformat_alloc_context();
 	snprintf(oc->filename, sizeof(oc->filename), "&s", filename);
@@ -156,6 +274,17 @@
 		exit(-1);
 	}
 
+	AVCodec *pAudioCodec = avcodec_find_decoder(f_ctx->streams[nASI]->codec->codec_id);
+	if (pAudioCodec == NULL) {
+		av_log(NULL, AV_LOG_ERROR, "No Decoder was Found\n");
+		exit(-1);
+	}
+
+	if (avcodec_open2(f_ctx->streams[nASI]->codec, pAudioCodec, NULL) < 0) {
+		av_log(NULL, AV_LOG_ERROR, "Fail to Initialize Decoder\n");
+		exit(-1);
+	}
+
 	pVCtx->colorspace;
 
 	clock_t before;
@@ -163,17 +292,31 @@
 	before = clock();
 
 	AVPacket packet;
+	AVPacket Audio_packet;
 	while (av_read_frame(f_ctx, &packet) >= 0) {
 		if (packet.stream_index == nVSI) {
 			// Decode Video
 			avcodec_decode_video2(dec_ctx, pVFrame, &bGotPicture, &packet);
 			if (bGotPicture) {
 				// Encode Video
-				encoding(pVFrame, packet);
+				cout << "Get Picture\n";
+				//encoding(pVFrame, packet);
+			}
+		}else if (packet.stream_index == nASI) {
+			avcodec_decode_audio4(Audio_dec_ctx, pAFrame, &bGotSound, &packet);
+			if (bGotSound) {
+				cout << "Get Sound\n";
+				int data_size = av_samples_get_buffer_size(NULL, Audio_codec_c->channels, pAFrame->nb_samples, Audio_codec_c->sample_fmt, 1);
+				// Encode Audio
+				fwrite(pAFrame->data[0], 1, data_size, Audio_f);
+				//audio_encoding(pAFrame, packet);
 			}
+
 		}
 	}
 
+	//audio_encoding_ex(pAFrame, packet);
+
 	//result = (double)(clock() - before) / CLOCKS_PER_SEC;
 	result = clock() - before;
 	printf("�ɸ��ð��� %5.2f �Դϴ�.\n", result);
@@ -187,6 +330,8 @@
 
 	system("pause");
 
+	fclose(Audio_f);
+
 	return 0;
 }
 
@@ -212,16 +357,14 @@
 	//	}
 	//}
 
-	AVFormatContext AV;
-
 	ret = avcodec_encode_video2(c, &packet, pVFrame, &got_output);
 	if (ret < 0) {
 		fprintf(stderr, "Error encoding frame\n");
-		exit(1);
+		system("pause"); exit(1);
 	}
 	if (got_output) {
 		printf("Write frame %3d (size=%5d)\n", i, packet.size);
-		fwrite(packet.data, 1, packet.size, f);
+		fwrite(packet.data, 1, packet.size, Audio_f);
 		if (!ret && got_output && packet.size) {
 			packet.stream_index = 0;
 			/* Write the compressed frame to the media file. */
@@ -236,18 +379,40 @@
 		ret = avcodec_encode_video2(c, &pkt, NULL, &got_output);
 		if (ret < 0) {
 			fprintf(stderr, "Error encoding frame\n");
-			exit(1);
+			system("pause"); exit(1);
 		}
 
 		if (got_output) {
 			printf("Write frame %3d (size=%5d) \n", i, pkt.size);
-			fwrite(pkt.data, 1, pkt.size, f);
+			fwrite(pkt.data, 1, pkt.size, Audio_f);
 			av_free_packet(&pkt);
 		}
 	}
 	av_free_packet(&packet);
 }
 
+void audio_encoding(AVFrame* pAFrame, AVPacket packet) {
+
+	av_init_packet(&packet);
+	packet.data = NULL;
+	packet.size = 0;
+	fflush(stdout);
+
+	pAFrame->nb_samples = Audio_codec_c->frame_size;
+	pAFrame->format = Audio_codec_c->sample_fmt;
+	pAFrame->channel_layout = Audio_codec_c->channel_layout;
+
+	ret = avcodec_encode_audio2(Audio_codec_c, &packet, pAFrame, &got_output);
+	if (ret < 0) {
+		fprintf(stderr, "Error encoding frame\n");
+		system("pause"); exit(1);
+	}
+
+	av_freep(&Audio_samples);
+	avcodec_free_frame(&Audio_frame);
+	av_free(Audio_codec_c);
+}
+
 ///> Print Stream Information
 void Stream_Info(AVFormatContext* pFmtCtx) {
 	int i;
@@ -693,3 +858,86 @@
 
 	return "";
 }
+
+void audio_encoding_ex(AVFrame* pVFrame, AVPacket packet) {
+	float t, tincr;
+	int i, j, k;
+	/* Audio_frame containing input raw audio */
+	Audio_frame = avcodec_alloc_frame();
+	if (!Audio_frame) {
+		fprintf(stderr, "Could not allocate audio Audio_frame\n");
+		system("pause"); exit(1);
+	}
+
+	Audio_frame->nb_samples = Audio_codec_c->frame_size;
+	Audio_frame->format = Audio_codec_c->sample_fmt;
+	Audio_frame->channel_layout = Audio_codec_c->channel_layout;
+
+	/* the Audio_codec gives us the Audio_frame size, in Audio_samples,
+	* we calculate the size of the Audio_samples buffer in bytes */
+	Audio_buffer_size = av_samples_get_buffer_size(NULL, Audio_codec_c->channels, Audio_codec_c->frame_size,
+		Audio_codec_c->sample_fmt, 0);
+
+	Audio_samples = (uint16_t*)av_malloc(Audio_buffer_size);
+	if (!Audio_samples) {
+		fprintf(stderr, "Could not allocate %d bytes for Audio_samples buffer\n",
+			Audio_buffer_size);
+		system("pause"); exit(1);
+	}
+
+
+	/* setup the data pointers in the AVFrame */
+	ret = avcodec_fill_audio_frame(Audio_frame, Audio_codec_c->channels, Audio_codec_c->sample_fmt,
+		(const uint8_t*)Audio_samples, Audio_buffer_size, 0);
+	if (ret < 0) {
+		fprintf(stderr, "Could not setup audio Audio_frame\n");
+		system("pause"); exit(1);
+	}
+
+	/* encode a single tone sound */
+	t = 0;
+	tincr = 2 * M_PI * 440.0 / Audio_codec_c->sample_rate;
+	for (i = 0; i < 200; i++) {
+		av_init_packet(&pkt);
+		pkt.data = NULL; // packet data will be allocated by the encoder
+		pkt.size = 0;
+
+		for (j = 0; j < Audio_codec_c->frame_size; j++) {
+			Audio_samples[2 * j] = (int)(sin(t) * 10000);
+
+			for (k = 1; k < Audio_codec_c->channels; k++)
+				Audio_samples[2 * j + k] = Audio_samples[2 * j];
+			t += tincr;
+		}
+		/* encode the Audio_samples */
+		ret = avcodec_encode_audio2(Audio_codec_c, &pkt, Audio_frame, &got_output);
+		if (ret < 0) {
+			fprintf(stderr, "Error encoding audio Audio_frame\n");
+			system("pause"); exit(1);
+		}
+		if (got_output) {
+			fwrite(pkt.data, 1, pkt.size, Audio_f);
+			av_free_packet(&pkt);
+		}
+	}
+
+	/* get the delayed frames */
+	for (got_output = 1; got_output; i++) {
+		ret = avcodec_encode_audio2(Audio_codec_c, &pkt, NULL, &got_output);
+		if (ret < 0) {
+			fprintf(stderr, "Error encoding Audio_frame\n");
+			system("pause"); exit(1);
+		}
+
+		if (got_output) {
+			fwrite(pkt.data, 1, pkt.size, Audio_f);
+			av_free_packet(&pkt);
+		}
+	}
+	fclose(Audio_f);
+
+	av_freep(&Audio_samples);
+	avcodec_free_frame(&Audio_frame);
+	avcodec_close(Audio_codec_c);
+	av_free(Audio_codec_c);
+}
\ No newline at end of file
